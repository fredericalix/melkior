syntax = "proto3";

package node.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/melkior/nodestatus/gen/go/api/proto;nodev1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Node Status Platform API"
    version: "v1"
    description: "gRPC-first API for node status tracking. Swagger is served for schema visibility. Do not expose REST business handlers."
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        name: "authorization"
        in: IN_HEADER
        description: "Use: Bearer <ADMIN_TOKEN>"
      }
    }
  }
  security: { security_requirement: { key: "bearer" } }
};

message Node {
  string id = 1;
  NodeType type = 2;
  string name = 3;
  map<string,string> labels = 4;
  NodeStatus status = 5;
  google.protobuf.Timestamp last_seen = 6;
  string metadata_json = 7;
}

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  BAREMETAL = 1;
  VM = 2;
  CONTAINER = 3;
}

enum NodeStatus {
  NODE_STATUS_UNSPECIFIED = 0;
  UNKNOWN = 1;
  UP = 2;
  DOWN = 3;
  DEGRADED = 4;
}

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  CREATED = 1;
  UPDATED = 2;
  DELETED = 3;
}

message CreateNodeRequest {
  Node node = 1;
}
message CreateNodeResponse {
  Node node = 1;
}

message UpdateNodeRequest {
  Node node = 1;
}
message UpdateNodeResponse {
  Node node = 1;
}

message UpdateStatusRequest {
  string id = 1;
  NodeStatus status = 2;
}
message UpdateStatusResponse {
  Node node = 1;
}

message DeleteNodeRequest {
  string id = 1;
}
message DeleteNodeResponse {
  string id = 1;
}

message GetNodeRequest {
  string id = 1;
}
message GetNodeResponse {
  Node node = 1;
}

message ListNodesRequest {
  int32 page_size = 1;
  string page_token = 2;
  NodeType type_filter = 3;
  NodeStatus status_filter = 4;
}
message ListNodesResponse {
  repeated Node nodes = 1;
  string next_page_token = 2;
}

message WatchEventsRequest {}
message WatchEventsResponse {
  EventType event_type = 1;
  Node node = 2;
  repeated string changed_fields = 3;
}

service NodeService {
  rpc CreateNode(CreateNodeRequest) returns (CreateNodeResponse);
  rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse);
  rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);
  rpc WatchEvents(WatchEventsRequest) returns (stream WatchEventsResponse);
}